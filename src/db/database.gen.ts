import type { UserId, GameId, WordId } from '~/server/validation';
export type { UserId, GameId, WordId };
/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Definitions {
  definition: string | null;
  guessUserId: UserId | null;
  userId: UserId;
  wordId: WordId;
}

export interface Games {
  createdAt: Timestamp;
  id: GameId;
  ownerId: UserId;
  state: {
  phase: "start";
} | {
  currentPosition: number;
  phase: "proposal";
} | {
  currentPosition: number;
  phase: "guessing";
} | {
  phase: "finish";
};
}

export interface Teams {
  gameId: GameId;
  nickname: string;
  ready: boolean;
  userId: UserId;
}

export interface Users {
  id: UserId;
  lastActiveTimestamp: Timestamp;
  name: string | null;
}

export interface Words {
  definition: string;
  gameId: GameId;
  id: WordId;
  position: number;
  revealed: Generated<boolean>;
  term: string;
}

export interface DB {
  definitions: Definitions;
  games: Games;
  teams: Teams;
  users: Users;
  words: Words;
}
